---
title: "Analysis of AI Thinking Traces in KSAO Extraction"
subtitle: "Methodological Insights from Gemini 2.5 Pro's Reasoning Processes"
author: "Bryan Acton, PhD | Binghamton University<br>with assistance from Claude Code AI system"
date: today
format: 
  html:
    toc: true
    number-sections: true
    theme: flatly
    css: styles.css
    code-fold: true
    include-in-header:
      text: |
        <style>
        .title {
          font-size: 2.5em;
          text-align: center;
          margin-bottom: 0.5em;
        }
        .subtitle {
          font-size: 1.5em;
          text-align: center;
          margin-bottom: 2em;
        }
        .author, .date {
          text-align: center;
        }
        .callout {
          padding: 1.25rem;
          margin-top: 1.25rem;
          margin-bottom: 1.25rem;
          border: 1px solid #e9ecef;
          border-left-width: .5rem;
          border-radius: .25rem;
        }
        .callout-note {
          border-left-color: #5bc0de;
          background-color: #f8f9fa;
        }
        .callout-important {
          border-left-color: #d9534f;
          background-color: #f8f9fa;
        }
        .callout-tip {
          border-left-color: #5cb85c;
          background-color: #f8f9fa;
        }
        .model-info {
          background-color: #f0f0f0;
          border: 1px solid #ddd;
          border-radius: 5px;
          padding: 15px;
          margin-bottom: 20px;
        }
        .section-box {
          background-color: #f9f9f9;
          border: 1px solid #e1e1e1;
          border-radius: 5px;
          padding: 20px;
          margin-bottom: 30px;
          box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }
        .process-diagram {
          display: flex;
          flex-direction: row;
          justify-content: space-between;
          margin: 30px 0;
        }
        .process-step {
          flex: 1;
          text-align: center;
          padding: 15px;
          background-color: #e9f7ef;
          margin: 0 5px;
          border-radius: 5px;
          position: relative;
        }
        .process-step::after {
          content: "â†’";
          position: absolute;
          right: -10px;
          top: 50%;
          transform: translateY(-50%);
          font-size: 20px;
          color: #5dade2;
        }
        .process-step:last-child::after {
          content: "";
        }
        </style>
  pdf:
    toc: true
    number-sections: true
    colorlinks: true
    documentclass: report
    geometry:
      - margin=1in
    include-in-header:
      text: |
        \usepackage{xcolor}
        \usepackage[most]{tcolorbox}
        \usepackage{fancyhdr}
        \usepackage{graphicx}
        \pagestyle{fancy}
        \fancyhead[L]{Thinking Trace Analysis}
        \fancyhead[R]{\thepage}
        \definecolor{modelcolor}{RGB}{240,240,240}
        \definecolor{sectioncolor}{RGB}{249,249,249}
execute:
  echo: false
---

```{r setup}
#| include: false
library(readr)
library(knitr)
library(dplyr)
```

```{=html}
<p align="center">
<a href="https://github.com/actonbp/KSAO_WFD"><img src="https://img.shields.io/badge/GitHub-KSAO__WFD-blue?style=for-the-badge&logo=github" alt="GitHub Repository"></a>
</p>
```

```{=latex}
\begin{center}
\textbf{GitHub Repository:} \url{https://github.com/actonbp/KSAO_WFD}
\end{center}
```

![CASAC Learning Map](images/cover_image.png){.cover-image fig-align="center" width=100%}

::: {.callout-note}
## Executive Summary
This report analyzes the thinking processes employed in a multi-stage AI-assisted approach to competency extraction. By examining thinking traces captured during the analysis of addiction counseling textbook materials, we've documented effective methodologies for KSAO identification and relationship mapping. This meta-analysis reveals generalizable principles for competency mapping that can be applied across diverse professional fields, offering valuable insights for both AI-assisted and human-led curriculum development efforts.
:::

::: {.model-info}
## Analysis Information

**Document Status:** WORKING DRAFT (Version 1.0)  
**Last Updated:** `r format(Sys.Date(), "%B %d, %Y")`  
**Source Document:** Credentialed Alcoholism and Substance Abuse Counselor (CASAC) Textbook  
**Analysis Date:** `r format(Sys.Date(), "%B %d, %Y")`  
**Model Used:** Google Gemini 2.5 Pro Preview  
**Chapters Analyzed:** Chapters 1-9 and Appendices (Complete Textbook Analysis)  
**Analysis Type:** Comprehensive Thinking Trace Meta-Analysis
:::

# Introduction {.section-box}

This report presents a meta-analysis of the thinking traces generated by Google's Gemini 2.5 Pro model during the process of KSAO extraction from CASAC textbook chapters. While the companion report "Integrated KSAO Framework" presents the results of this analysis, this document focuses on the process itself - examining how the AI approached the task, what patterns emerged in its reasoning, and what methodological insights can be gained.

The analysis of thinking traces provides valuable insights into effective methods for competency extraction and offers transparency into how the AI-derived framework was developed. This meta-level understanding can inform both future AI-assisted competency mapping projects and traditional human-led curriculum development efforts.

## Acknowledgments {.section-box}

::: {.callout-note}
The methodological analysis presented in this report was made possible through collaborative efforts and support from multiple sources. We would like to express our gratitude to:

- Google for providing access to the Gemini 2.5 Pro model with thinking trace capabilities
- Anthropic for Claude Code assistance in documentation and report preparation
- The School of Management at Binghamton University for institutional support
- Dr. Rory Eckardt and the Workforce Development Group at Binghamton University
- The AI ethics community for developing standards for transparent AI research reporting
- Fellow researchers in the fields of computational approaches to workforce development
- Practitioners who provided feedback on the practical implications of these methodological insights

We are particularly grateful to those who encouraged the documentation and analysis of thinking traces as a way to enhance transparency in AI-assisted research.
:::

::: {.process-diagram}
<div class="process-step">Text Extraction</div>
<div class="process-step">Initial Identification</div>
<div class="process-step">Classification</div>
<div class="process-step">Relationship Mapping</div>
<div class="process-step">Meta-Analysis</div>
:::

# Methodology {.section-box}

## Data Sources

The thinking traces analyzed in this report were generated during the comprehensive analysis of all textbook chapters:

::: {.callout-note}
1. **Chapter 1**: Covering SUD terminology, neurobiology, models of addiction, risk factors, etc.

2. **Chapter 2**: Focusing on systems of care, telehealth, harm reduction, etc.

3. **Chapter 3**: Covering screening, assessment, and treatment planning processes.

4. **Chapter 4**: Focusing on counseling methods and therapeutic approaches.

5. **Chapter 5**: Examining case management and service coordination.

6. **Chapter 6**: Covering evidence-based practices in substance use disorder treatment.

7. **Chapter 7**: Examining professional, ethical, and legal responsibilities.

8. **Chapter 8**: Covering documentation, record-keeping, and clinical supervision.

9. **Chapter 9**: Focusing on cultural competence and special populations.

10. **Appendices**: Including commonly used drugs, mental health conditions, etc.

11. **Integration Process**: The trace from combining the individual chapter analyses
:::

## Analysis Approach

::: {.callout-important}
**Prompt Used for Thinking Trace Analysis:**

"You are an expert in meta-cognitive analysis and curriculum development methodology. I need you to analyze the thinking traces generated by an AI during the process of extracting Knowledge, Skills, Abilities, and Other characteristics (KSAOs) from substance use disorder counseling textbook materials.

Please analyze these thinking traces to:
1. Identify common themes, patterns, and approaches used across different chapter analyses
2. Highlight key methodological insights about effective KSAO extraction processes
3. Summarize the most effective reasoning processes observed
4. Identify variations in approach between different chapters and their effectiveness
5. Extract generalizable principles for KSAO identification that could be applied in other domains

Focus particularly on:
- The sequencing of analytical steps
- How decisions were made about classification (K vs S vs A vs O)
- How relationships between KSAOs were identified
- Methods used for resolving ambiguities or overlaps
- Effective strategies for comprehensive coverage of material"
:::

The thinking traces themselves were analyzed using Gemini 2.5 Pro with a specialized prompt that asked the model to:
- Identify common themes, patterns, and approaches used across analyses
- Highlight key methodological insights about KSAO extraction
- Summarize the most effective reasoning processes
- Identify variations in approach between different chapters
- Extract generalizable principles for KSAO identification

# Thinking Process Analysis {.section-box}

```{r}
#| include: false
# Read the thinking trace analysis file
analysis_file <- "../output/full_analysis/thinking_trace_analysis.txt"
analysis_text <- readLines(analysis_file)

# Remove any front matter or initial thinking traces that aren't part of the final document
start_line <- which(grepl("^## Meta-Analysis|^# Meta-Analysis", analysis_text, ignore.case = TRUE))
if(length(start_line) == 0) {
  start_line <- 1
}

analysis_content <- analysis_text[start_line:length(analysis_text)]
```

```{r, results='asis'}
# Output the analysis content
cat(paste(analysis_content, collapse = "\n"))
```

# Applications of Thinking Process Insights {.section-box}

The methodological insights extracted from the AI's thinking processes can be applied in several ways:

::: {.callout-tip}
1. **Curriculum Development**: Human curriculum developers can adopt similar systematic approaches when analyzing educational content for competency mapping.

2. **Prompt Engineering**: Future AI-assisted KSAO extraction projects can benefit from refined prompts that incorporate the most effective reasoning structures identified here.

3. **Validation Methods**: The thinking processes reveal what sources and reasoning patterns provide the strongest evidence for including particular KSAOs, which can inform validation approaches.

4. **Methodology Training**: Educators and workforce development specialists can be trained in systematic approaches to competency identification using the patterns observed in the AI's reasoning.
:::

# Limitations and Considerations {.section-box}

While the analysis of thinking traces provides valuable insights, several limitations should be noted:

::: {.callout-note}
1. **AI-Specific Reasoning**: Some aspects of the AI's thinking process may not directly translate to human reasoning approaches.

2. **Model Limitations**: Despite analyzing the complete textbook, the AI's reasoning processes have inherent limitations in their ability to fully capture all nuances in professional competency development.

3. **Implicit Assumptions**: The AI may make implicit assumptions or connection leaps that aren't fully documented in the thinking traces.

4. **Domain Specificity**: The approaches documented here are specific to substance use disorder counseling and may need adaptation for other domains.
:::

# Conclusion {.section-box}

The analysis of AI thinking traces reveals a rich, systematic methodology for KSAO extraction that combines close text analysis, inference, categorization, and relationship mapping. By documenting and analyzing these processes, we gain not only a better understanding of how the KSAO framework was developed but also valuable insights that can enhance human-led competency mapping efforts.

The systematic, phase-based approach observed across analyses suggests a generalizable methodology that could be adapted for competency mapping in various professional domains beyond substance use disorder counseling. This represents a significant contribution to the field of workforce development, offering both process transparency and methodological advancement.

## Feedback and Future Directions {.section-box}

As a working draft, this methodology report will continue to evolve. We welcome feedback from researchers, educators, and AI practitioners interested in applied AI methodologies for competency mapping.

::: {.callout-tip}
### Planned Methodological Advancements

1. **Prompt Engineering Research**: Systematic testing of alternative prompting strategies
2. **Human-AI Collaboration Models**: Development of hybrid approaches combining AI and human expertise
3. **Validation Protocols**: Creation of validation methods for AI-derived competency frameworks
4. **Cross-Model Comparison**: Analysis of thinking processes across different AI models and architectures
5. **Domain Transfer Experiments**: Testing methodology generalization to other professional domains
6. **Longitudinal Process Analysis**: Tracking methodological evolution as AI capabilities advance
:::

To contribute to these methodological advancements or provide feedback, please visit the [GitHub repository](https://github.com/actonbp/KSAO_WFD) or contact the primary author directly.

# Appendix: Technical Implementation {.section-box}

This appendix provides the actual code implementation for key components of the technical pipeline, with special focus on the thinking trace analysis process. These scripts demonstrate the sophisticated multi-stage approach used to capture and analyze AI reasoning.

## A1. OCR Text Extraction with Thinking Trace Feature

The OCR text extraction utilized Gemini 2.5 Pro's multimodal capabilities combined with thinking trace capturing functionality:

::: {.callout}
```python
#!/usr/bin/env python
import os
import base64
import argparse
from pathlib import Path
from PIL import Image
import io
from google import genai
from dotenv import load_dotenv
import time
import json

# Load environment variables from .env file (contains GEMINI_API_KEY)
load_dotenv()

# Get the API key
api_key = os.environ.get("GEMINI_API_KEY")
if not api_key:
    raise ValueError("GEMINI_API_KEY environment variable not found. Please set it in your .env file.")

# Initialize the Gemini API client
client = genai.Client(api_key=api_key)

# Current model version
GEMINI_MODEL = "gemini-2.5-pro-preview-05-06"  # Updated to use Gemini 2.5 Pro

# Process a single page and extract text using Gemini API with thinking traces enabled
def extract_text_from_page(img):
    """
    Extract text from a single image using the Gemini 2.5 Pro API.
    
    Args:
        img: PIL Image object containing the page to process
        
    Returns:
        String containing the extracted text, with thinking process
    """
    # Convert the image to base64
    base64_image = image_to_base64(img)
    
    # Add thinking trace instructions
    instruction_prefix = "Think carefully step-by-step to extract this text. Show your detailed reasoning process."
    
    # Create the request content with the image and thinking trace instructions
    contents = {
        "parts": [
            {
                "inline_data": {
                    "mime_type": "image/png", 
                    "data": base64_image
                }
            },
            {
                "text": instruction_prefix + "\n\nYour primary goal is to extract ALL text from this image with the highest possible accuracy and completeness. Maintain proper paragraph breaks, formatting, and the original layout as much as possible..."
            }
        ]
    }
    
    # Call the Gemini API with enhanced configuration
    try:
        response = client.models.generate_content(
            model=GEMINI_MODEL,
            contents=contents
        )
        # Access thinking traces if available
        if hasattr(response, 'usage_metadata') and hasattr(response.usage_metadata, 'thoughts_token_count'):
            print(f"Thinking trace tokens: {response.usage_metadata.thoughts_token_count}")
        
        return response.text if response.text is not None else "[LLM OCR returned no text for this page]"
    except Exception as e:
        print(f"Error processing image with Gemini API: {e}")
        return f"Error extracting text: {str(e)}"
```
:::

## A2. Chapter-Level KSAO Analysis with Thinking Traces

The chapter analysis was specifically designed to capture detailed thinking traces:

::: {.callout}
```python
#!/usr/bin/env python3
import os
import json
import argparse
from pathlib import Path
from dotenv import load_dotenv
from google import genai
import time

# Load environment variables
load_dotenv()

# Configure the Gemini API client
api_key = os.environ.get("GEMINI_API_KEY")
if not api_key:
    raise ValueError("GEMINI_API_KEY environment variable not found. Please set it in your .env file.")

# Initialize the client
genai_client = genai.Client(api_key=api_key)

# Current model version
GEMINI_MODEL = "gemini-2.5-pro-preview-05-06"

def analyze_chapter_with_thinking_traces(chapter_text, output_file):
    """
    Analyze the chapter text using Gemini 2.5 Pro to extract KSAOs with detailed thinking traces.
    
    Args:
        chapter_text: The text from a single chapter
        output_file: Path to save the analysis results
        
    Returns:
        The analysis text and thinking traces
    """
    
    prompt = """
    You are an expert in curriculum development and competency mapping for substance use disorder (SUD) counselors. 
    You need to analyze the following textbook content to identify the complete set of Knowledge, Skills, Abilities, 
    and Other Characteristics (KSAOs) required for SUD counselors.
    
    For each identified KSAO, provide:
    1. A clear name/title
    2. A complete description
    3. The classification (Knowledge, Skill, Ability, or Other characteristic)
    4. The specificity level (general or specialized)
    5. Related O*NET occupational categories
    6. Stability/malleability classification (whether this KSAO is relatively fixed or can be developed)
    7. Explicit/tacit orientation (whether this is explicitly taught or tacitly acquired)
    8. Prerequisites or developmental relationships (what must be learned before this)
    
    Additionally, identify any hierarchical structure among these KSAOs:
    - Which KSAOs represent dimensions vs. sub-dimensions
    - How KSAOs relate to each other in terms of development sequence
    - Which KSAOs serve as foundations for others
    
    I NEED YOU TO DOCUMENT YOUR COMPLETE THINKING PROCESS IN DETAIL:
    1. First, carefully read through the textbook content and note key concepts related to KSAOs
    2. For each section or chapter, identify explicit and implicit competencies
    3. Categorize each KSAO, considering its nature (K, S, A, or O)
    4. Analyze relationships between KSAOs to identify hierarchies and dependencies
    5. Evaluate each KSAO's specificity, malleability, and how it's typically acquired
    6. Organize all findings into a systematic framework
    
    Show your thinking process step-by-step as you analyze the text, including your considerations,
    evaluations, and reasoning. Then present your final findings in a structured format.
    """
    
    # Add explicit thinking trace instructions
    thinking_prompt = "Think carefully step-by-step to solve this problem. Show your detailed reasoning process. Document your thinking process thoroughly.\n\n" + prompt
    
    print("Sending request to Gemini API with thinking trace enabled...")
    print(f"Text length: {len(chapter_text)} characters")
    
    try:
        # Configure the generation to include thinking trace
        response = genai_client.models.generate_content(
            model=GEMINI_MODEL,
            contents=thinking_prompt + chapter_text
        )
        
        # Log thinking trace metrics
        if hasattr(response, 'usage_metadata') and hasattr(response.usage_metadata, 'thoughts_token_count'):
            print(f"Thinking token count: {response.usage_metadata.thoughts_token_count}")
            print(f"Total token count: {response.usage_metadata.total_token_count}")
        
        # Save the result and thinking trace
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(response.text)
        
        # Save a separate file with just the thinking process
        thinking_file = f"{output_file}_thinking_process.txt"
        with open(thinking_file, 'w', encoding='utf-8') as f:
            f.write(response.text)
        
        print(f"Analysis with thinking traces saved to {output_file}")
        print(f"Thinking process saved to {thinking_file}")
        return response.text
    
    except Exception as e:
        print(f"Error analyzing chapter with thinking traces: {e}")
        return None
```
:::

## A3. Thinking Trace Collection and Meta-Analysis

The thinking trace analysis was performed using a specialized script:

::: {.callout}
```python
#!/usr/bin/env python3
import os
import argparse
import json
from pathlib import Path
from dotenv import load_dotenv
from google import genai
import time

# Load environment variables
load_dotenv()

# Configure the Gemini API client
api_key = os.environ.get("GEMINI_API_KEY")
if not api_key:
    raise ValueError("GEMINI_API_KEY environment variable not found. Please set it in your .env file.")

# Initialize the client
genai_client = genai.Client(api_key=api_key)

# Current model version
GEMINI_MODEL = "gemini-2.5-pro-preview-05-06"

def gather_thinking_traces(input_dir="output/full_analysis"):
    """Gather all thinking traces from chapter analyses."""
    input_path = Path(input_dir)
    
    if not input_path.exists():
        print(f"Error: Input directory {input_dir} not found!")
        return None
    
    # Find all thinking process files
    thinking_files = [f for f in input_path.glob("*_thinking_process.txt")
                     if not "integrated" in f.name]
    
    if not thinking_files:
        print(f"No thinking process files found in {input_dir}")
        return None
    
    print(f"Found {len(thinking_files)} thinking process files")
    
    # Combine all thinking traces with clear separation
    combined_traces = ""
    for file_path in sorted(thinking_files):
        chapter_name = file_path.stem.replace("_ksao_analysis_thinking_process", "")
        print(f"Adding thinking trace for {chapter_name}...")
        
        with open(file_path, 'r', encoding='utf-8') as f:
            thinking_text = f.read()
            combined_traces += f"\n\n### THINKING TRACE FOR {chapter_name} ###\n\n{thinking_text}\n\n"
    
    return combined_traces

def analyze_thinking_traces(combined_traces, output_file):
    """
    Use Gemini to analyze thinking traces across chapters and create a summary document.
    
    Args:
        combined_traces: String containing all thinking traces
        output_file: Path to save the analysis
        
    Returns:
        The analysis text or None if an error occurred
    """
    
    prompt = """
    You are an expert in curriculum development, competency mapping, and metacognitive analysis.
    You have been given the thinking traces from an AI system that analyzed different chapters of 
    a substance use disorder (SUD) counselor textbook to identify KSAOs (Knowledge, Skills, Abilities, 
    and Other Characteristics).
    
    Your task is to analyze these thinking traces to create a comprehensive summary document that:
    
    1. Identifies common themes, patterns, and approaches used across the analyses
    2. Highlights key methodological insights about how the AI approached KSAO extraction
    3. Summarizes the reasoning processes that were most effective
    4. Identifies any variations in approach between different chapters and explains why they might occur
    5. Extracts generalizable principles for KSAO identification in professional competency mapping
    
    This meta-analysis should help curriculum developers understand both:
    a) How to effectively identify KSAOs from educational materials
    b) How AI reasoning can be leveraged for competency mapping
    
    Please organize your analysis into clear sections with headings, and provide specific examples 
    from the thinking traces to illustrate your points. Conclude with a set of best practices for 
    KSAO identification and competency mapping.
    
    THINKING TRACES TO ANALYZE:
    """
    
    print("Sending request to Gemini API...")
    print(f"Text length: {len(combined_traces)} characters")
    
    try:
        # First, save the combined traces for reference
        with open(f"{output_file}_source_traces.txt", 'w', encoding='utf-8') as f:
            f.write(combined_traces)
        
        # Add thinking trace to the meta-analysis itself
        thinking_prompt = "Think carefully about this meta-analysis task. Document your own thinking process as you analyze these thinking traces.\n\n" + prompt
        
        # Call Gemini API with thinking trace enabled
        response = genai_client.models.generate_content(
            model=GEMINI_MODEL,
            contents=thinking_prompt + combined_traces
        )
        
        # Log thinking trace metrics for the meta-analysis
        if hasattr(response, 'usage_metadata') and hasattr(response.usage_metadata, 'thoughts_token_count'):
            print(f"Meta-analysis thinking token count: {response.usage_metadata.thoughts_token_count}")
            print(f"Meta-analysis total token count: {response.usage_metadata.total_token_count}")
        
        # Save the raw response
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(response.text)
        
        # Save a separate file with just the thinking process for the meta-analysis
        thinking_file = f"{output_file}_thinking_process.txt"
        with open(thinking_file, 'w', encoding='utf-8') as f:
            f.write(response.text)
        
        print(f"Thinking trace analysis saved to {output_file}")
        print(f"Meta-analysis thinking process saved to {thinking_file}")
        return response.text
        
    except Exception as e:
        print(f"Error analyzing thinking traces: {e}")
        return None
```
:::

## A4. Report Generation

The thinking trace analysis report was generated using the following shell script:

::: {.callout}
```bash
#!/bin/bash

# This script renders both Quarto reports using enhanced templates

echo "==== Rendering Enhanced KSAO Framework Report ===="
echo "Generating HTML..."
cd docs
/usr/local/bin/quarto render ksao_framework_report.qmd --output ksao_framework_report.html
echo "Generating PDF with xelatex..."
/usr/local/bin/quarto render ksao_framework_report.qmd --to pdf --output ksao_framework_report.pdf --pdf-engine=xelatex

echo "==== Rendering Enhanced Thinking Trace Analysis Report ===="
echo "Generating HTML..."
/usr/local/bin/quarto render thinking_trace_analysis_report.qmd --output thinking_trace_analysis_report.html
echo "Generating PDF with xelatex..."
/usr/local/bin/quarto render thinking_trace_analysis_report.qmd --to pdf --output thinking_trace_analysis_report.pdf --pdf-engine=xelatex
cd ..

echo "==== Reports Generated ===="
echo "KSAO Framework Report: docs/ksao_framework_report.html and docs/ksao_framework_report.pdf"
echo "Thinking Trace Analysis Report: docs/thinking_trace_analysis_report.html and docs/thinking_trace_analysis_report.pdf"
```
:::